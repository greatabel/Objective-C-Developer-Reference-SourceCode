// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: a.proto

#ifndef PROTOBUF_a_2eproto__INCLUDED
#define PROTOBUF_a_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace foo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_a_2eproto();
void protobuf_AssignDesc_a_2eproto();
void protobuf_ShutdownFile_a_2eproto();

class snd_data;

// ===================================================================

class snd_data : public ::google::protobuf::Message {
 public:
  snd_data();
  virtual ~snd_data();

  snd_data(const snd_data& from);

  inline snd_data& operator=(const snd_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const snd_data& default_instance();

  void Swap(snd_data* other);

  // implements Message ----------------------------------------------

  snd_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const snd_data& from);
  void MergeFrom(const snd_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string var = 1;
  inline bool has_var() const;
  inline void clear_var();
  static const int kVarFieldNumber = 1;
  inline const ::std::string& var() const;
  inline void set_var(const ::std::string& value);
  inline void set_var(const char* value);
  inline void set_var(const char* value, size_t size);
  inline ::std::string* mutable_var();
  inline ::std::string* release_var();
  inline void set_allocated_var(::std::string* var);

  // required int32 var1 = 2;
  inline bool has_var1() const;
  inline void clear_var1();
  static const int kVar1FieldNumber = 2;
  inline ::google::protobuf::int32 var1() const;
  inline void set_var1(::google::protobuf::int32 value);

  // optional float var2 = 3;
  inline bool has_var2() const;
  inline void clear_var2();
  static const int kVar2FieldNumber = 3;
  inline float var2() const;
  inline void set_var2(float value);

  // optional double var3 = 4;
  inline bool has_var3() const;
  inline void clear_var3();
  static const int kVar3FieldNumber = 4;
  inline double var3() const;
  inline void set_var3(double value);

  // @@protoc_insertion_point(class_scope:foo.snd_data)
 private:
  inline void set_has_var();
  inline void clear_has_var();
  inline void set_has_var1();
  inline void clear_has_var1();
  inline void set_has_var2();
  inline void clear_has_var2();
  inline void set_has_var3();
  inline void clear_has_var3();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* var_;
  ::google::protobuf::int32 var1_;
  float var2_;
  double var3_;
  friend void  protobuf_AddDesc_a_2eproto();
  friend void protobuf_AssignDesc_a_2eproto();
  friend void protobuf_ShutdownFile_a_2eproto();

  void InitAsDefaultInstance();
  static snd_data* default_instance_;
};
// ===================================================================


// ===================================================================

// snd_data

// required string var = 1;
inline bool snd_data::has_var() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void snd_data::set_has_var() {
  _has_bits_[0] |= 0x00000001u;
}
inline void snd_data::clear_has_var() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void snd_data::clear_var() {
  if (var_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    var_->clear();
  }
  clear_has_var();
}
inline const ::std::string& snd_data::var() const {
  // @@protoc_insertion_point(field_get:foo.snd_data.var)
  return *var_;
}
inline void snd_data::set_var(const ::std::string& value) {
  set_has_var();
  if (var_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    var_ = new ::std::string;
  }
  var_->assign(value);
  // @@protoc_insertion_point(field_set:foo.snd_data.var)
}
inline void snd_data::set_var(const char* value) {
  set_has_var();
  if (var_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    var_ = new ::std::string;
  }
  var_->assign(value);
  // @@protoc_insertion_point(field_set_char:foo.snd_data.var)
}
inline void snd_data::set_var(const char* value, size_t size) {
  set_has_var();
  if (var_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    var_ = new ::std::string;
  }
  var_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:foo.snd_data.var)
}
inline ::std::string* snd_data::mutable_var() {
  set_has_var();
  if (var_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    var_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:foo.snd_data.var)
  return var_;
}
inline ::std::string* snd_data::release_var() {
  clear_has_var();
  if (var_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = var_;
    var_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void snd_data::set_allocated_var(::std::string* var) {
  if (var_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete var_;
  }
  if (var) {
    set_has_var();
    var_ = var;
  } else {
    clear_has_var();
    var_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:foo.snd_data.var)
}

// required int32 var1 = 2;
inline bool snd_data::has_var1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void snd_data::set_has_var1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void snd_data::clear_has_var1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void snd_data::clear_var1() {
  var1_ = 0;
  clear_has_var1();
}
inline ::google::protobuf::int32 snd_data::var1() const {
  // @@protoc_insertion_point(field_get:foo.snd_data.var1)
  return var1_;
}
inline void snd_data::set_var1(::google::protobuf::int32 value) {
  set_has_var1();
  var1_ = value;
  // @@protoc_insertion_point(field_set:foo.snd_data.var1)
}

// optional float var2 = 3;
inline bool snd_data::has_var2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void snd_data::set_has_var2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void snd_data::clear_has_var2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void snd_data::clear_var2() {
  var2_ = 0;
  clear_has_var2();
}
inline float snd_data::var2() const {
  // @@protoc_insertion_point(field_get:foo.snd_data.var2)
  return var2_;
}
inline void snd_data::set_var2(float value) {
  set_has_var2();
  var2_ = value;
  // @@protoc_insertion_point(field_set:foo.snd_data.var2)
}

// optional double var3 = 4;
inline bool snd_data::has_var3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void snd_data::set_has_var3() {
  _has_bits_[0] |= 0x00000008u;
}
inline void snd_data::clear_has_var3() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void snd_data::clear_var3() {
  var3_ = 0;
  clear_has_var3();
}
inline double snd_data::var3() const {
  // @@protoc_insertion_point(field_get:foo.snd_data.var3)
  return var3_;
}
inline void snd_data::set_var3(double value) {
  set_has_var3();
  var3_ = value;
  // @@protoc_insertion_point(field_set:foo.snd_data.var3)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace foo

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_a_2eproto__INCLUDED
