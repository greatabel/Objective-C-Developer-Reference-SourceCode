// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: a.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "a.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace foo {

namespace {

const ::google::protobuf::Descriptor* snd_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  snd_data_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_a_2eproto() {
  protobuf_AddDesc_a_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "a.proto");
  GOOGLE_CHECK(file != NULL);
  snd_data_descriptor_ = file->message_type(0);
  static const int snd_data_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(snd_data, var_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(snd_data, var1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(snd_data, var2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(snd_data, var3_),
  };
  snd_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      snd_data_descriptor_,
      snd_data::default_instance_,
      snd_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(snd_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(snd_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(snd_data));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_a_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    snd_data_descriptor_, &snd_data::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_a_2eproto() {
  delete snd_data::default_instance_;
  delete snd_data_reflection_;
}

void protobuf_AddDesc_a_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\007a.proto\022\003foo\"A\n\010snd_data\022\013\n\003var\030\001 \002(\t\022"
    "\014\n\004var1\030\002 \002(\005\022\014\n\004var2\030\003 \001(\002\022\014\n\004var3\030\004 \001("
    "\001", 81);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "a.proto", &protobuf_RegisterTypes);
  snd_data::default_instance_ = new snd_data();
  snd_data::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_a_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_a_2eproto {
  StaticDescriptorInitializer_a_2eproto() {
    protobuf_AddDesc_a_2eproto();
  }
} static_descriptor_initializer_a_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int snd_data::kVarFieldNumber;
const int snd_data::kVar1FieldNumber;
const int snd_data::kVar2FieldNumber;
const int snd_data::kVar3FieldNumber;
#endif  // !_MSC_VER

snd_data::snd_data()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:foo.snd_data)
}

void snd_data::InitAsDefaultInstance() {
}

snd_data::snd_data(const snd_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:foo.snd_data)
}

void snd_data::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  var_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  var1_ = 0;
  var2_ = 0;
  var3_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

snd_data::~snd_data() {
  // @@protoc_insertion_point(destructor:foo.snd_data)
  SharedDtor();
}

void snd_data::SharedDtor() {
  if (var_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete var_;
  }
  if (this != default_instance_) {
  }
}

void snd_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* snd_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return snd_data_descriptor_;
}

const snd_data& snd_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_a_2eproto();
  return *default_instance_;
}

snd_data* snd_data::default_instance_ = NULL;

snd_data* snd_data::New() const {
  return new snd_data;
}

void snd_data::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<snd_data*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(var1_, var3_);
    if (has_var()) {
      if (var_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        var_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool snd_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:foo.snd_data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string var = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_var()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->var().data(), this->var().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "var");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_var1;
        break;
      }

      // required int32 var1 = 2;
      case 2: {
        if (tag == 16) {
         parse_var1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &var1_)));
          set_has_var1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_var2;
        break;
      }

      // optional float var2 = 3;
      case 3: {
        if (tag == 29) {
         parse_var2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &var2_)));
          set_has_var2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_var3;
        break;
      }

      // optional double var3 = 4;
      case 4: {
        if (tag == 33) {
         parse_var3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &var3_)));
          set_has_var3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:foo.snd_data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:foo.snd_data)
  return false;
#undef DO_
}

void snd_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:foo.snd_data)
  // required string var = 1;
  if (has_var()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->var().data(), this->var().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "var");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->var(), output);
  }

  // required int32 var1 = 2;
  if (has_var1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->var1(), output);
  }

  // optional float var2 = 3;
  if (has_var2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->var2(), output);
  }

  // optional double var3 = 4;
  if (has_var3()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->var3(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:foo.snd_data)
}

::google::protobuf::uint8* snd_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:foo.snd_data)
  // required string var = 1;
  if (has_var()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->var().data(), this->var().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "var");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->var(), target);
  }

  // required int32 var1 = 2;
  if (has_var1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->var1(), target);
  }

  // optional float var2 = 3;
  if (has_var2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->var2(), target);
  }

  // optional double var3 = 4;
  if (has_var3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->var3(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foo.snd_data)
  return target;
}

int snd_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string var = 1;
    if (has_var()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->var());
    }

    // required int32 var1 = 2;
    if (has_var1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->var1());
    }

    // optional float var2 = 3;
    if (has_var2()) {
      total_size += 1 + 4;
    }

    // optional double var3 = 4;
    if (has_var3()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void snd_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const snd_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const snd_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void snd_data::MergeFrom(const snd_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_var()) {
      set_var(from.var());
    }
    if (from.has_var1()) {
      set_var1(from.var1());
    }
    if (from.has_var2()) {
      set_var2(from.var2());
    }
    if (from.has_var3()) {
      set_var3(from.var3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void snd_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void snd_data::CopyFrom(const snd_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool snd_data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void snd_data::Swap(snd_data* other) {
  if (other != this) {
    std::swap(var_, other->var_);
    std::swap(var1_, other->var1_);
    std::swap(var2_, other->var2_);
    std::swap(var3_, other->var3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata snd_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = snd_data_descriptor_;
  metadata.reflection = snd_data_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace foo

// @@protoc_insertion_point(global_scope)
